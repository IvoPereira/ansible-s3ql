---

- name: Create cache directory.
  file:
    state: directory
    path: "{{ s3ql_cache_dir }}"
    owner: "{{ s3ql_user }}"
    group: "{{ s3ql_group }}"
    mode: 0775

- name: Configure | /etc/fuse.conf | user_allow_other.
  lineinfile:
    state: present
    dest: /etc/fuse.conf
    regexp: '^#?user_allow_other'
    line: user_allow_other

## TODO: Use s3_bucket (Ansible 2.0)) or gcp_storage_bucket (Ansible 2.6) to create a bucket in this role

- name: Upload Authinfo from template.
  template:
    src: s3ql-authinfo.j2
    dest: "{{ s3ql_authinfo_file }}"
    mode: 0400
    owner: "{{ s3ql_user }}"
    group: "{{ s3ql_group }}"

- name: Create a mountpoint directory (if not exist).
  file:
    state: directory
    path: "{{ s3ql_mountpoint }}"
    # owner: "{{ s3ql_user }}"
    # group: "{{ s3ql_group }}"
    # mode: 0775

- name: Check for existing initialized S3QL install.
  stat:
    path: /etc/.s3ql.{{ s3ql_prefix }}.initialized
  register: s3ql_initialized

- name: The follwing tasks won't run if .s3ql.initialized file already exists.
  block:

    - name: Make S3QL encrypted filesystem (run only once).
      shell: printf '%s\n' "{{ s3ql_encryption_password }}" "{{ s3ql_encryption_password }}" | mkfs.s3ql --authfile {{ s3ql_authinfo_file }} --cachedir {{ s3ql_cache_dir }} {{ s3ql_storage_url }}/{{ s3ql_prefix }}
      when: s3ql_encryption_enabled

    - name: Make S3QL unencrypted filesystem (run only once).
      shell: mkfs.s3ql --plain --authfile {{ s3ql_authinfo_file }} --cachedir {{ s3ql_cache_dir }} {{ s3ql_storage_url }}/{{ s3ql_prefix }}
      when: not s3ql_encryption_enabled

    - name: Mark S3QL install as initialized.
      file:
        path: /etc/.s3ql.{{ s3ql_prefix }}.initialized
        state: touch

  when:
    - s3ql_initialized.stat.exists == False
    - s3ql_create_filesystem
